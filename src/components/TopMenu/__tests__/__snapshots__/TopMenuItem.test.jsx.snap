// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TopMenuItem should be disabled 1`] = `
<div
  data-mock="MainItemWrap"
>
  {
  "disabled": true,
  "onClick": null,
  "href": ""
}
  <span
    className="sc-bdVaJa evfwdh"
  />
</div>
`;

exports[`TopMenuItem should handle subMenu 1`] = `
<TopMenuItem
  disabled={false}
  href=""
  onClick={null}
  open={false}
  subMenu={
    Array [
      Object {
        "text": "some text - 1",
        "value": 1,
      },
      Object {
        "text": "some text - 2",
        "value": 2,
      },
    ]
  }
>
  <MainItemWrap
    disabled={false}
    href=""
    onClick={null}
  >
    <div
      data-mock="MainItemWrap"
    >
      {
  "disabled": false,
  "onClick": null,
  "href": ""
}
      <styled.span>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": true,
                "lastClassName": "evfwdh",
                "rules": Array [
                  "
    flex-grow: 1;
    min-width: 22px;
    text-align: center;
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <span
            className="sc-bdVaJa evfwdh"
          >
            Button text
          </span>
        </StyledComponent>
      </styled.span>
      <styled.span>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bwzfXH",
                "isStatic": true,
                "lastClassName": "joyYPP",
                "rules": Array [
                  "
    flex-grow: 0;
    padding-left: 5px;
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bwzfXH",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <span
            className="sc-bwzfXH joyYPP"
          >
            <Icon
              name="caret-down"
            >
              <div
                data-mock="Icon"
              />
            </Icon>
          </span>
        </StyledComponent>
      </styled.span>
      <styled.div
        open={false}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-htpNat",
                "isStatic": false,
                "lastClassName": "lhQhqv",
                "rules": Array [
                  "
    position: absolute;
    top: 100%;
    display: ",
                  [Function],
                  ";
    padding-top: 5px;
    z-index: ",
                  "10",
                  ";
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-htpNat",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          open={false}
        >
          <div
            className="sc-htpNat lhQhqv"
            open={false}
          >
            <SubMenu
              data={
                Array [
                  Object {
                    "text": "some text - 1",
                    "value": 1,
                  },
                  Object {
                    "text": "some text - 2",
                    "value": 2,
                  },
                ]
              }
            >
              <div
                data-mock="SubMenu"
              />
            </SubMenu>
          </div>
        </StyledComponent>
      </styled.div>
    </div>
  </MainItemWrap>
</TopMenuItem>
`;

exports[`TopMenuItem simple render 1`] = `
<div
  data-mock="MainItemWrap"
>
  {
  "disabled": false,
  "onClick": null,
  "href": ""
}
  <span
    className="sc-bdVaJa evfwdh"
  />
</div>
`;
